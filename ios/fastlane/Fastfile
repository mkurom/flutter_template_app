
default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"

	def flutter_version
		# ios/fastlane からプロジェクトルートを求める
		project_root = File.expand_path('../../', __dir__)
	
		pubspec_path = File.join(project_root, 'pubspec.yaml')
	
		data = YAML.load_file(pubspec_path)
		build_name, build_number = data['version'].split('+')
		{ name: build_name, number: build_number }
	end

  lane :beta do
    # 証明書、プロビジョニングファイルの作成、同期
		# ENV['CI'] は GitHub Actions で実行しているかどうかを判定するための環境変数
    sync_code_signing(
      type: "appstore",
      readonly: ENV['CI'] == 'true'
    )

    # # Flutter のビルド
    # Dir.chdir('..') do
    #   sh "flutter", "build", "ios", "--release", "--no-codesign"
    # end
		
    # fastlane のビルド番号を上書き
    next_build = flutter_version
    increment_version_number(version_number: next_build[:name])
    increment_build_number(build_number: next_build[:number])

    # Xcode のビルド
    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      clean: true,
      silent: true,
			disable_xcpretty: true,
			buildlog_path: "./fastlane/build_logs",
			export_options: {
        provisioningProfiles: {
          "com.my.flutterTemplateApp" => "match AppStore com.my.flutterTemplateApp"
        }
      }
    )
    
		# アップロード
    upload_to_testflight(
			skip_waiting_for_build_processing: true
    )

    # 
    clean_build_artifacts

    UI.success("🎉  Build #{next_build} が TestFlight にアップロードされました！")
  end

	lane :local do
		sync_code_signing(
			type: "appstore",
			readonly: true,
		)
		api_key = app_store_connect_api_key(
			key_id: ENV['KEY_ID'],
			issuer_id: ENV['ISSUER_ID'],
			key_content: ENV['KEY_CONTENT_BASE64'],
			is_key_content_base64: true,
		)
		
		current_marketing = get_version_number(
			xcodeproj: './Runner.xcodeproj',
			target: 'Runner'
		)
		
		latest_build = latest_testflight_build_number(
										app_identifier: ENV['APPSTORE_IDENTIFIER'],
										version: current_marketing,
										api_key: api_key
									) || 0
		
		next_build = latest_build + 1
		
		UI.message("⏫  Auto‑increment build number → #{next_build}")
		
		increment_build_number(
			xcodeproj: './Runner.xcodeproj',
			build_number: next_build
		)
		
		build_app(
			scheme: "Runner",
			export_method: "app-store",
			clean: true,
			silent: true,
			export_options: {
				provisioningProfiles: {
					"com.my.flutterTemplateApp" => "match AppStore com.my.flutterTemplateApp"
				}
			}
		)
		
		upload_to_testflight(
			api_key: api_key,
			app_identifier: ENV['APPSTORE_IDENTIFIER'],
		)
		clean_build_artifacts
		
		UI.success("🎉  Build #{next_build} が TestFlight にアップロードされました！")
  end
end
